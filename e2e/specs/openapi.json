{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI definition",
    "version": "v0"
  },
  "servers": [
    {
      "url": "https://localhost:8080",
      "description": "User Profile Service"
    }
  ],
  "tags": [
    {
      "name": "Actuator",
      "description": "Monitor and interact",
      "externalDocs": {
        "description": "Spring Boot Actuator Web API Documentation",
        "url": "https://docs.spring.io/spring-boot/docs/current/actuator-api/html/"
      }
    }
  ],
  "paths": {
    "/api/v1/users/{id}":{
      "get": {
        "tags": [
          "user-profile-controller"
        ],
        "summary": "Find a user by ID",
        "operationId": "findById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref":"#/components/schemas/UserResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "404":{
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user-profile-controller"
        ],
        "summary": "Update a user",
        "operationId": "update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref":"#/components/schemas/UserResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "404":{
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": [
          "user-profile-controller"
        ],
        "summary": "Find all the users by the provided filtering criterias",
        "operationId": "findAll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserFilter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref":"#/components/schemas/UserListResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "404":{
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user-profile-controller"
        ],
        "summary": "Create a user",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/user-contacts/{id}": {
      "get": {
        "tags": [
          "user-profile-controller"
        ],
        "summary": "Find a user details by user details ID",
        "operationId": "findUserDetailsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref":"#/components/schemas/UserDetailsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "404":{
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user-profile-controller"
        ],
        "summary": "Update user details",
        "operationId": "updateUserDetailsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDetailsUpdateRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref":"#/components/schemas/UserDetailsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "404":{
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/user-contacts/by-user-id/{id}": {
      "get": {
        "tags": [
          "user-profile-controller"
        ],
        "summary": "Find user details by its related user id",
        "operationId": "findUserDetailsByUserId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref":"#/components/schemas/UserDetailsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "404":{
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/actuator": {
      "get": {
        "tags": [
          "Actuator"
        ],
        "summary": "Actuator root web endpoint",
        "operationId": "links",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.spring-boot.actuator.v3+json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/Link"
                    }
                  }
                }
              },
              "application/vnd.spring-boot.actuator.v2+json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/Link"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/Link"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/actuator/mappings": {
      "get": {
        "tags": [
          "Actuator"
        ],
        "summary": "Actuator web endpoint 'mappings'",
        "operationId": "mappings",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.spring-boot.actuator.v3+json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/vnd.spring-boot.actuator.v2+json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/actuator/liquibase": {
      "get": {
        "tags": [
          "Actuator"
        ],
        "summary": "Actuator web endpoint 'liquibase'",
        "operationId": "liquibase",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.spring-boot.actuator.v3+json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/vnd.spring-boot.actuator.v2+json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/actuator/health": {
      "get": {
        "tags": [
          "Actuator"
        ],
        "summary": "Actuator web endpoint 'health'",
        "operationId": "health",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.spring-boot.actuator.v3+json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/vnd.spring-boot.actuator.v2+json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/actuator/health/**": {
      "get": {
        "tags": [
          "Actuator"
        ],
        "summary": "Actuator web endpoint 'health-path'",
        "operationId": "health-path",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.spring-boot.actuator.v3+json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/vnd.spring-boot.actuator.v2+json": {
                "schema": {
                  "type": "object"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorDto"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiErrorDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UserResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the user."
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the user"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the user"
          },
          "email": {
            "type": "string",
            "description": "The email of the user"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp indicating the date and time when the user was created. The format follows the ISO 8601 standard."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp indicating the date and time when the user was updated. The format follows the ISO 8601 standard."
          },
          "userDetailsResponseDto": {
            "$ref": "#/components/schemas/UserDetailsResponseDto"
          }
        }
      },
      "UserDetailsResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the user details."
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number of the user. Should start with a '+' followed by 1 to 14 digits."
          },
          "telegramId": {
            "type": "string",
            "description": "The Telegram ID of the user. Should start with '@' and contain 5 to 32 alphanumeric characters or underscores."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp indicating the date and time when the user details was created. The format follows the ISO 8601 standard."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp indicating the date and time when the user details was updated. The format follows the ISO 8601 standard."
          }
        }
      },
      "UserUpdateRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the user."
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the user",
            "minLength": 1,
            "maxLength": 50
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the user",
            "minLength": 1,
            "maxLength": 50
          },
          "email": {
            "type": "string",
            "description": "The email of the user",
            "format": "email",
            "maxLength": 255
          },
          "userDetailsUpdateDto": {
            "$ref": "#/components/schemas/UserDetailsUpdateDto"
          }
        },
        "required": ["firstName", "lastName"]
      },
      "UserDetailsUpdateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the user details."
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number of the user. Should start with a '+' followed by 1 to 14 digits.",
            "pattern": "^\\+[1-9]\\d{1,14}$"
          },
          "telegramId": {
            "type": "string",
            "description": "The Telegram ID of the user. Should start with '@' and contain 5 to 32 alphanumeric characters or underscores.",
            "pattern": "^@[a-zA-Z0-9_]{5,32}$"
          }
        }
      },
      "UserCreateRequestDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The first name of the user",
            "minLength": 1,
            "maxLength": 50
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the user",
            "minLength": 1,
            "maxLength": 50
          },
          "email": {
            "type": "string",
            "description": "The email of the user",
            "format": "email",
            "maxLength": 255
          },
          "userDetailsCreateRequestDto": {
            "$ref": "#/components/schemas/UserDetailsCreateRequestDto"
          }
        },
        "required": ["firstName", "lastName", "email", "userDetailsCreateRequestDto"]
      },
      "UserDetailsCreateRequestDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "The phone number of the user. Should start with a '+' followed by 1 to 14 digits.",
            "pattern": "^\\+[1-9]\\d{1,14}$"
          },
          "telegramId": {
            "type": "string",
            "description": "The Telegram ID of the user. Should start with '@' and contain 5 to 32 alphanumeric characters or underscores.",
            "pattern": "^@[a-zA-Z0-9_]{5,32}$"
          }
        },
        "required": ["phoneNumber", "telegramId"]
      },
      "UserDetailsUpdateRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the user details."
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number of the user. Should start with a '+' followed by 1 to 14 digits.",
            "pattern": "^\\+[1-9]\\d{1,14}$"
          },
          "telegramId": {
            "type": "string",
            "description": "The Telegram ID of the user. Should start with '@' and contain 5 to 32 alphanumeric characters or underscores.",
            "pattern": "^@[a-zA-Z0-9_]{5,32}$"
          }
        },
        "required": ["id", "phoneNumber", "telegramId"]
      },
      "UserFilter": {
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "default": 1,
            "description": "Page size"
          },
          "pageNumber": {
            "type": "integer",
            "default": 1,
            "description": "Page number"
          },
          "sortBy": {
            "type": "string",
            "enum": ["id", "firstName", "lastName", "email"],
            "default": "id",
            "description": "Sort by"
          },
          "sortOrder": {
            "type": "string",
            "enum": ["asc", "desc"],
            "default": "asc",
            "description": "Sort order"
          }
        }
      },
      "UserListResponseDto": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/UserResponseDto"
        }
      },
      "Link": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string"
          },
          "templated": {
            "type": "boolean"
          }
        }
      }
    }
  }
}